from django.db import models
from django.contrib.auth.models import User

class Topic(models.Model): #Создание класса модели. 
    #Модель сообщает Django, как работать с данными, которые будут храниться
    #в приложении (то есть, как их обрабатывать)
    """Тема, которую изучает пользователь"""
    #Мы не пишем def __init__(self, ...), так как наш класс-потомок наследует 
    #информацию у класса-родителя (models.Model, где models - это файл с 
    #импортированием всех возможных КЛАССОВ, описывающих тип модели, а Model 
    #- одна из моделей, которая определяет БАЗОВУЮ функциональность модели)
    #и этот класс-родитель уже содержит все необходимые данные для работы класса
    text = models.CharField(max_length=200) #CharField - блок данных, состоящий
    #из символов, то есть текст. Атрибут max_length=200 сообщает Django, сколько
    #места необходимо зарезервировать в БД для него.
    date_added = models.DateTimeField(auto_now_add=True) #DateTimeField - дааные,
    #которые представляют собой блок для хранения даты и времени. Атрибут
    #auto_now_add=True - приказывает Django автоматически присвоить этому
    #атрибуту текущую дату и время, каждый раз, когда пользователь создает новую 
    #тему
    owner = models.ForeignKey(User, on_delete=models.CASCADE) #поле используется
    #по отношению к внешнему ключу импортированной модели User, если полдьзователь
    #удален, то и все темы, связанные с этим пользователем также будут удалены.

    #Полный список всех полей (models....), которые могут использоваться в 
    #модели, приведены в документе Django Model Field Reference
    #на https://docs.djangoproject.com/en/4.1/ref/models/fields/

    def __str__(self): #необходимо сообщить Django, какой атрибут должен 
        #использоваться по умполчанию при вводе информации о теме. 
        #Django вызывает метод __str__() для вывода простого представления модели
        #__str__ - это что выведится когда произойдет строковое взаимодействие с объектом
        #(типа print())
        """Возвращает строковое представление модели"""
        #Данная реализация __str__() возвращает строку, хранящуюся в атрибуте text
        return self.text
    
class Entry(models.Model):
    """Информация, изученная пользователем по теме"""
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE) #ForeignKey - [из теории БД]
    #внешний ключ содержит ссылку на другую запись в базе данных. Таким образом каждая запись
    #связыватся с конкретной темой. Каждой теме при создании присваивается ключ или
    #идентификатор. 
    #on_delete=models.CASCADE - сообщает Django, что при удалении темы все записи, связанные
    #с этой темой также должны быть удалены (это называется каскадное удаление)
    text = models.TextField() #полю такого типа (TextField) ограничения не требуются
    date_added = models.DateTimeField(auto_now_add=True)

    class Meta: #класс Meta вкладывается в класс Entery. Класс Meta хранит дополнительную
        #информацию по управлению моделью.
        #В данном случае этот класс позволяет задать специальный атрибут, который приказывает
        #Django использовать форму множественного числа Entries при обращении более чем к одной
        #записи (без этого Django будет использовать неправильную форму Entrys)
        verbose_name_plural = 'entries'

    def __str__(self):
        """Возвращает строковое представление модели"""
        if len(self.text) > 50:
            return f"{self.text[:50]}..." #так как запись может быть достаточно длинной, то мы выводим
            #только первые 50 символов и многоточие.
        else:
            return self.text